name: Build and deploy

on:
  workflow_dispatch:

jobs:
  determine-variants-to-build:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.determine-variants.outputs.matrix }}
    steps:
      - name: Build matrix
        id: determine-variants
        run: |
          JSON="{\"include\":["
          JSON="$JSON{\"variant\": \"Jora\"},{\"variant\": \"Jobstreet\"},{\"variant\": \"Jobsdb\"}"
          JSON="$JSON]}"
          echo "::set-output name=matrix::$( echo "$JSON" )"
          
      - name: Read Flutter version
        id: read-flutter-version
        uses: notiz-dev/github-action-json-property@release
        with:
          path: ${{ env.flutterSourceDir }}/embedded/.fvm/fvm_config.json
          prop_path: 'flutterSdkVersion'
      
      - run: echo ${{steps.read-flutter-version.outputs.prop}} 
          
  build:
    needs: determine-variants-to-build
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.determine-variants-to-build.outputs.matrix)}}

    steps:
      - name: Build artifact
        run: echo "Building ${{ matrix.variant }}"
        
      - name: Generate file
        run: |
          mkdir -p ./path/to/files
          echo "${{matrix.variant}}" >> ./path/to/files/test_file.txt
          cat ./path/to/files/test_file.txt
    
      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.variant }}-artifacts
          path: ./path/to/**/*.txt

  deploy:
    needs: [determine-variants-to-build, build]
    runs-on: ubuntu-latest
    environment: production
    strategy:
      matrix: ${{fromJson(needs.determine-variants-to-build.outputs.matrix)}}

    steps:        
      - name: Download build artifact
        uses: actions/download-artifact@v2.0.10
        with:
          # Artifact name
          name: ${{ matrix.variant }}-artifacts
      
      - name: Get package name
        run: |
          variant=${{ matrix.variant }}

          if [[ $variant = "Jora" ]]
          then
            package="com.jora.android"
          elif [[ $variant = "Jobsdb" ]]
          then
            package="com.jora.android.sgjobsdb"
          elif [[ $variant = "Jobstreet" ]]
          then
            package="com.jora.jobstreet"
          fi

          echo "PACKAGE=$package" >> $GITHUB_ENV
      
      - name: Print package
        run: echo $PACKAGE
        
          
